name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: read

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run full test suite
        run: |
          source .venv/bin/activate
          pytest -v --cov=src/py_ref --cov-report=xml --cov-report=term-missing

      - name: Run linting
        run: |
          source .venv/bin/activate
          ruff check .
          black --check .
          isort --check-only .

      - name: Verify version matches tag
        run: |
          TAG_VERSION="${{ github.event.inputs.tag || github.ref_name }}"
          TAG_VERSION="${TAG_VERSION#v}"

          source .venv/bin/activate
          PACKAGE_VERSION=$(python -c "from py_ref import __version__; print(__version__)")

          echo "Tag version: $TAG_VERSION"
          echo "Package version: $PACKAGE_VERSION"

          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match package version ($PACKAGE_VERSION)"
            exit 1
          fi

  build:
    name: Build Distribution
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution packages
        run: python -m build

      - name: Check distribution packages
        run: twine check dist/*

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/py-ref
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use trusted publisher (no password needed)
          # Configure at https://pypi.org/manage/account/publishing/
          verbose: true
          print-hash: true

  publish-test-pypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/py-ref
    permissions:
      id-token: write

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

  notify:
    name: Notify Success
    needs: [publish-pypi, publish-test-pypi]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Extract version
        id: version
        run: |
          TAG_VERSION="${{ github.event.inputs.tag || github.ref_name }}"
          TAG_VERSION="${TAG_VERSION#v}"
          echo "VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Success message
        run: |
          echo "ðŸŽ‰ Successfully published py-ref version ${{ steps.version.outputs.VERSION }}!"
          echo "ðŸ“¦ PyPI: https://pypi.org/project/py-ref/${{ steps.version.outputs.VERSION }}/"
          echo "ðŸ§ª TestPyPI: https://test.pypi.org/project/py-ref/${{ steps.version.outputs.VERSION }}/"
          echo ""
          echo "Install with:"
          echo "  pip install py-ref==${{ steps.version.outputs.VERSION }}"
          echo "  uv pip install py-ref==${{ steps.version.outputs.VERSION }}"
